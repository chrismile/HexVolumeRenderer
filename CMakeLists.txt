cmake_minimum_required (VERSION 3.1)
project (HexVolumeRenderer)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
#MESSAGE(STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH})

set (CMAKE_CXX_STANDARD 11)

file(GLOB_RECURSE SOURCES src/*.cpp src/*.c)
include_directories(src)

#make VERBOSE=1

IF(WIN32)
	add_executable(HexVolumeRenderer WIN32 ${SOURCES})
ELSE()
	add_executable(HexVolumeRenderer ${SOURCES})
ENDIF()

IF(WIN32)
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows")
	target_link_libraries(HexVolumeRenderer mingw32 SDL2main SDL2)
ELSE()
	target_link_libraries(HexVolumeRenderer SDL2)
ENDIF()


cmake_policy(SET CMP0012 NEW)
find_package(OpenMP REQUIRED)
find_package(SGL REQUIRED)
find_package(Boost COMPONENTS system filesystem REQUIRED)
find_package(CURL REQUIRED)
find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP jsoncpp)
link_libraries(${JSONCPP_LIBRARIES})
IF(WIN32)
	target_link_libraries(HexVolumeRenderer boost_system-mt)
	target_link_libraries(HexVolumeRenderer boost_filesystem-mt)
	target_link_libraries(HexVolumeRenderer opengl32)
	target_link_libraries(HexVolumeRenderer glew32)
ELSE()
	target_link_libraries(HexVolumeRenderer boost_system)
	target_link_libraries(HexVolumeRenderer boost_filesystem)
	target_link_libraries(HexVolumeRenderer GL)
	target_link_libraries(HexVolumeRenderer GLEW)
ENDIF()
target_link_libraries(HexVolumeRenderer tinyxml2)
target_link_libraries(HexVolumeRenderer ${SGL_LIBRARIES} ${NETCDF_LIBRARIES} ${CURL_LIBRARIES} ${JSONCPP_LIBRARIES})

include_directories(${NETCDF_INCLUDES})

if(OPENMP_FOUND)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()
