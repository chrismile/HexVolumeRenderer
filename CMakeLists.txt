cmake_minimum_required (VERSION 3.5)
cmake_policy(VERSION 3.5...3.20)
project (HexVolumeRenderer)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
#MESSAGE(STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH})

set (CMAKE_CXX_STANDARD 11)

file(GLOB_RECURSE SOURCES src/*.cpp src/*.c)
list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasetsDownloader.cpp)
list(APPEND SOURCES_DOWNLOADER ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasets.hpp)
list(APPEND SOURCES_DOWNLOADER ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasets.cpp)
list(APPEND SOURCES_DOWNLOADER ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasetsDownloader.cpp)
include_directories(src)

if(MSVC)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:__cplusplus")
	# Avoid warning 'IMPORTED_IMPLIB not set for imported target "sgl" configuration "MinSizeRel/RelWithDebInfo".'
	set(CMAKE_CONFIGURATION_TYPES Debug Release)
endif()

#if(MSVC)
#	set(CMAKE_CXX_FLAGS "-W3 /EHsc")
#elseif(CMAKE_COMPILER_IS_GNUCXX)
#	set(CMAKE_CXX_FLAGS "-Wall")
#elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#	set(CMAKE_CXX_FLAGS "-Wall")
#endif()

# Prefer GLVND by default when available.
if (${CMAKE_VERSION} VERSION_GREATER "3.11")
	cmake_policy(SET CMP0072 NEW)
endif()

option(USE_PYTHON "Build with Python 3 support for replay scripts" ON)
option(USE_CORK "Build with Cork as CSG Library" OFF)
option(USE_LEMON "Build with matching code and LEMON graph library" OFF)
option(USE_STEAMWORKS "Build with Steamworks SDK" OFF)

set(DATA_PATH "${CMAKE_SOURCE_DIR}/Data" CACHE PATH "Location of folder 'Data'")
add_definitions(-DDATA_PATH=\"${DATA_PATH}\")

if (USE_PYTHON)
	if (${CMAKE_VERSION} VERSION_GREATER "3.11")
		# 2021-05-06: CMake won't find vcpkg version if we don't search for the interpreter.
		if(VCPKG_TOOLCHAIN)
			find_package(Python3 COMPONENTS Development Interpreter REQUIRED)
		else()
			find_package(Python3 COMPONENTS Development REQUIRED)
		endif()
	else()
		pkg_check_modules(Python3 QUIET python3)
	endif()
endif()

if (Python3_FOUND AND USE_PYTHON)
	MESSAGE(STATUS "Found Python 3. Enabling replay script support.")
else()
	list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Widgets/ReplayWidget.cpp)
	MESSAGE(STATUS "Python 3 couldn't be found. Switching off replay script support.")
endif()

if(USE_LEMON)
	if (UNIX AND NOT APPLE)
		# Dirty fix for bug in Ubuntu 18.04: https://bugs.launchpad.net/ubuntu/+source/liblemon/+bug/1827886
		list(APPEND CMAKE_PREFIX_PATH /usr/lib/cmake)
	endif()
	find_package(LEMON REQUIRED)
	#target_link_libraries(HexVolumeRenderer PUBLIC ${LEMON_LIBRARIES})
	include_directories(${LEMON_INCLUDES})
	add_definitions(-DUSE_LEMON)
else()
	list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Renderers/LOD/SheetComponentMatching.cpp)
endif()

if(USE_STEAMWORKS)
	# TODO: Dirty hack for now for remote testing via Steam. Make this more general.
	include_directories("/home/christoph/build/steamworks-sdk/public/steam/")
	link_directories("/home/christoph/build/steamworks-sdk/redistributable_bin/linux64/")
	add_definitions(-DUSE_STEAMWORKS)
else()
	list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Utils/Steamworks.cpp)
endif()

# Embree version 3.12.1-2 shipped by msys2 seems to be buggy and crashes on rtcCommitScene :(
if(NOT "${CMAKE_GENERATOR}" STREQUAL "MSYS Makefiles")
	if(VCPKG_TOOLCHAIN)
		find_package(TBB QUIET)
		find_package(embree 3 QUIET)
	else()
		find_package(embree 3.0 QUIET)
	endif()
endif()
if(embree_FOUND)
	MESSAGE(STATUS "Found Embree. Using Embree as the ray-mesh intersection library.")
else()
	list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Renderers/Intersection/RayMeshIntersection_Embree.cpp)
	MESSAGE(STATUS "Embree couldn't be found. Using nanort as the ray-mesh intersection library.")
endif()

if(WIN32)
	add_executable(HexVolumeRenderer WIN32 ${SOURCES})
else()
	add_executable(HexVolumeRenderer ${SOURCES})
endif()

# Hide console window in release build on Windows/MSVC.
# See: https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/recipe/VSConfigSpecificSettings
if(MSVC)
	set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE")
	set_target_properties(HexVolumeRenderer PROPERTIES COMPILE_DEFINITIONS_DEBUG "_CONSOLE")
	set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_RELWITHDEBINFO "/SUBSYSTEM:CONSOLE")
	set_target_properties(HexVolumeRenderer PROPERTIES COMPILE_DEFINITIONS_RELWITHDEBINFO "_CONSOLE")
	set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")
	set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_MINSIZEREL "/SUBSYSTEM:WINDOWS")
endif()

if(USE_CORK)
	find_package(Cork REQUIRED)
	find_package(GMP REQUIRED)
	include_directories(${CORK_INCLUDE_DIR})
	add_definitions(-DUSE_CORK)
	add_definitions(-DUSE_CSG)
	target_link_libraries(HexVolumeRenderer PUBLIC ${CORK_LIBRARIES})
	target_link_libraries(HexVolumeRenderer PUBLIC ${GMP_LIBRARIES})
endif()

if(USE_STEAMWORKS)
	target_link_libraries(HexVolumeRenderer PUBLIC steam_api)
endif()

set(FPHSA_NAME_MISMATCHED TRUE)
if(VCPKG_TOOLCHAIN)
	find_package(SDL2 CONFIG REQUIRED)
else()
	find_package(SDL2 REQUIRED)
endif()
if((${CMAKE_GENERATOR} STREQUAL "MinGW Makefiles") OR (${CMAKE_GENERATOR} STREQUAL "MSYS Makefiles"))
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows")
	target_link_libraries(HexVolumeRenderer PUBLIC mingw32)
endif()
if(VCPKG_TOOLCHAIN)
	target_link_libraries(HexVolumeRenderer PUBLIC SDL2::SDL2main)
else()
	target_link_libraries(HexVolumeRenderer PUBLIC SDL2::Main)
endif()

if (UNIX AND NOT APPLE)
    find_package(PkgConfig REQUIRED)
endif()

find_package(sgl REQUIRED)
find_package(Boost COMPONENTS system filesystem REQUIRED)
find_package(GLEW REQUIRED)
find_package(OpenGL REQUIRED)
if(VCPKG_TOOLCHAIN)
	find_package(libarchive QUIET)
	find_package(CURL CONFIG REQUIRED)
	find_package(Eigen3 CONFIG REQUIRED)
	find_package(jsoncpp CONFIG REQUIRED)
else()
	find_package(LibArchive QUIET)
	find_package(CURL REQUIRED)
	find_package(Eigen3 REQUIRED)
        find_package(jsoncpp QUIET)
        if (NOT jsoncpp_FOUND)
                pkg_check_modules(JSONCPP jsoncpp)
        endif()
endif()
if(NOT (EIGEN3_VERSION_STRING LESS 3.3))
	target_link_libraries(HexVolumeRenderer PUBLIC Eigen3::Eigen)
else()
	include_directories(${EIGEN3_INCLUDE_DIR})
endif()
target_link_libraries(HexVolumeRenderer PUBLIC sgl ${Boost_LIBRARIES} ${OPENGL_LIBRARIES} GLEW::GLEW ${NETCDF_LIBRARIES} ${CURL_LIBRARIES}) # ${LEMON_LIBRARIES}
include_directories(${sgl_INCLUDES} ${Boost_INCLUDE_DIR} ${OPENGL_INCLUDE_DIRS} ${GLEW_INCLUDES} ${NETCDF_INCLUDES} ${CURL_INCLUDES})

if (JSONCPP_LIBRARIES)
        target_link_libraries(HexVolumeRenderer PRIVATE ${JSONCPP_LIBRARIES})
endif()
if (TARGET jsoncpp_lib)
        get_target_property(jsoncpp_INCLUDES jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
        target_link_libraries(HexVolumeRenderer PRIVATE jsoncpp_lib)
elseif(TARGET jsoncpp_static)
        get_target_property(jsoncpp_INCLUDES jsoncpp_static INTERFACE_INCLUDE_DIRECTORIES)
        target_link_libraries(HexVolumeRenderer PRIVATE jsoncpp_static)
endif()
if (TARGET jsoncpp_object)
        target_link_libraries(HexVolumeRenderer PRIVATE jsoncpp_object)
endif()
target_include_directories(HexVolumeRenderer PRIVATE ${jsoncpp_INCLUDES})

if (Python3_FOUND AND USE_PYTHON)
	add_definitions(-DUSE_PYTHON)
	if (${CMAKE_VERSION} VERSION_GREATER "3.11")
		target_link_libraries(HexVolumeRenderer PUBLIC Python3::Python)
	else()
		target_link_libraries(HexVolumeRenderer PUBLIC ${Python3_LIBRARIES})
	endif()
	target_include_directories(HexVolumeRenderer PUBLIC ${Python3_INCLUDE_DIRS})

	# Add default PYTHONHOME path for vcpkg if no environment variable is set.
	if(VCPKG_TOOLCHAIN)
		if(DEFINED ENV{PYTHONHOME})
			set(PYTHONHOME "$ENV{PYTHONHOME}")
		else()
			find_path(PYTHONHOME_PATH tools/python3 HINTS ${PYTHONHOME_PATH})
			if (MSVC)
				set(PYTHONHOME "${PYTHONHOME_PATH}/tools/python3")
			else()
				set(PYTHONHOME "${PYTHONHOME_PATH}")
			endif()
		endif()
		if (PYTHONHOME)
			set(PYTHONHOME "${PYTHONHOME}" CACHE STRING "PYTHONHOME path.")
			add_definitions(-DPYTHONHOME_PATH=L\"${PYTHONHOME}\")
		endif()
	endif()
endif()

if(${embree_FOUND})
	add_definitions(-DUSE_EMBREE)
	if(VCPKG_TOOLCHAIN)
		target_link_libraries(HexVolumeRenderer PUBLIC embree)
	else()
		target_link_libraries(HexVolumeRenderer PUBLIC ${EMBREE_LIBRARIES})
	endif()
	include_directories(${EMBREE_INCLUDE_DIRS})
endif()

# According to https://devblogs.microsoft.com/cppblog/improved-openmp-support-for-cpp-in-visual-studio/,
# support for LLVM OpenMP was added with Visual Studio 2019 version 16.9. According to
# https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170,
# both Visual Studio 2019 version 16.8 and 16.9 have _MSC_VER / MSVC_VERSION 1928, so we need to check
# for a minimum version 1929.
find_package(OpenMP REQUIRED)
if(MSVC)
	option(USE_MSVC_OPENMP_LLVM "Use LLVM OpenMP with MSVC (available since Visual Studio 2019 version 16.9)." ON)
	option(USE_MSVC_OPENMP_EXPERIMENTAL "Use experimental OpenMP with MSVC (available since Visual Studio 2019 version 16.9)." ON)

	if(${MSVC_VERSION} GREATER_EQUAL 1929 AND (USE_MSVC_OPENMP_LLVM OR USE_MSVC_OPENMP_EXPERIMENTAL))
		if(USE_MSVC_OPENMP_LLVM)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp:llvm")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp:llvm")
		endif()
		if(USE_MSVC_OPENMP_EXPERIMENTAL)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp:experimental")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp:experimental")
		endif()
		if(USE_MSVC_OPENMP_LLVM AND USE_MSVC_OPENMP_EXPERIMENTAL)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /w44005")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /w44005")
		endif()
	endif()
else()
	if(OPENMP_FOUND)
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
	endif()
endif()


# Downloading data sets for replicability stamp automatically.
add_executable(HexaLabDatasetsDownloader ${SOURCES_DOWNLOADER})
target_link_libraries(HexaLabDatasetsDownloader PUBLIC sgl ${CURL_LIBRARIES})

if (JSONCPP_LIBRARIES)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE ${JSONCPP_LIBRARIES})
endif()
if (TARGET jsoncpp_lib)
        get_target_property(jsoncpp_INCLUDES jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE jsoncpp_lib)
elseif(TARGET jsoncpp_static)
        get_target_property(jsoncpp_INCLUDES jsoncpp_static INTERFACE_INCLUDE_DIRECTORIES)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE jsoncpp_static)
endif()
if (TARGET jsoncpp_object)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE jsoncpp_object)
endif()
target_include_directories(HexaLabDatasetsDownloader PRIVATE ${jsoncpp_INCLUDES})

