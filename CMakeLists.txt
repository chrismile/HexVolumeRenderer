cmake_minimum_required (VERSION 3.5)
cmake_policy(VERSION 3.5...3.20)
project (HexVolumeRenderer)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
#MESSAGE(STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH})

set (CMAKE_CXX_STANDARD 11)

file(GLOB_RECURSE SOURCES src/*.cpp src/*.c src/*.hpp src/*.h Data/Shaders/*.glsl)
list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasetsDownloader.cpp)
list(APPEND SOURCES_DOWNLOADER ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasets.hpp)
list(APPEND SOURCES_DOWNLOADER ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasets.cpp)
list(APPEND SOURCES_DOWNLOADER ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Loaders/HexaLabDatasetsDownloader.cpp)
include_directories(src)

file(GLOB_RECURSE SHADER_FILES Data/Shaders/*.glsl)
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/Data/Shaders" PREFIX "Shaders" FILES ${SHADER_FILES})

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:__cplusplus")
    # Avoid warning 'IMPORTED_IMPLIB not set for imported target "sgl" configuration "MinSizeRel/RelWithDebInfo".'
    set(CMAKE_CONFIGURATION_TYPES Debug Release)
endif()

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W3 /EHsc /Zc:__cplusplus")
endif()
#f(MSVC)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W3 /EHsc /Zc:__cplusplus")
#elseif(CMAKE_COMPILER_IS_GNUCXX)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
#elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
#endif()

# Prefer GLVND by default when available.
if (${CMAKE_VERSION} VERSION_GREATER "3.11")
    cmake_policy(SET CMP0072 NEW)
endif()

if(VCPKG_TOOLCHAIN)
    if(EXISTS "${Z_VCPKG_ROOT_DIR}/triplets/${VCPKG_TARGET_TRIPLET}.cmake")
        include("${Z_VCPKG_ROOT_DIR}/triplets/${VCPKG_TARGET_TRIPLET}.cmake")
    elseif(EXISTS "${Z_VCPKG_ROOT_DIR}/triplets/community/${VCPKG_TARGET_TRIPLET}.cmake")
        include("${Z_VCPKG_ROOT_DIR}/triplets/community/${VCPKG_TARGET_TRIPLET}.cmake")
    else()
        message(FATAL_ERROR "Could not find a vcpkg triplet file for ${VCPKG_TARGET_TRIPLET}.")
    endif()
endif()

if (MSVC)
    set(DEFAULT_USE_TBB ON)
else()
    set(DEFAULT_USE_TBB OFF)
endif()

option(USE_TBB "Build with TBB threading support instead of using OpenMP." ${DEFAULT_USE_TBB})
option(VCPKG_EXTERNAL_EMBREE "Use external Embree package if vcpkg is used for compilation." OFF)
option(USE_STATIC_STD_LIBRARIES "Link with standard libraries statically (only supported on Linux for now)." OFF)
option(USE_PYTHON "Build with Python 3 support for replay scripts" ON)
option(USE_CORK "Build with Cork as CSG Library" OFF)
option(USE_LEMON "Build with matching code and LEMON graph library" OFF)
option(USE_STEAMWORKS "Build with Steamworks SDK" OFF)

set(DATA_PATH "${CMAKE_SOURCE_DIR}/Data" CACHE PATH "Location of folder 'Data'")
add_definitions(-DDATA_PATH=\"${DATA_PATH}\")

if (USE_PYTHON)
    if (${CMAKE_VERSION} VERSION_GREATER "3.11")
        # 2021-05-06: CMake won't find vcpkg version if we don't search for the interpreter.
        # 2022-08-29: Finding interpreter fails with dynamic vcpkg build on Linux and macOS.
        if(VCPKG_TOOLCHAIN) #  AND (NOT UNIX OR VCPKG_LIBRARY_LINKAGE STREQUAL "static")
            find_package(Python3 COMPONENTS Development Interpreter REQUIRED)
        else()
            find_package(Python3 COMPONENTS Development REQUIRED)
        endif()
    else()
        pkg_check_modules(Python3 QUIET python3)
    endif()
endif()

if (Python3_FOUND AND USE_PYTHON)
    MESSAGE(STATUS "Found Python ${Python3_VERSION}. Enabling replay script support.")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/pythonversion.txt" "python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}")
else()
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Widgets/ReplayWidget.cpp)
    MESSAGE(STATUS "Python 3 couldn't be found. Switching off replay script support.")
endif()

if(USE_LEMON)
    if (UNIX AND NOT APPLE)
        # Dirty fix for bug in Ubuntu 18.04: https://bugs.launchpad.net/ubuntu/+source/liblemon/+bug/1827886
        list(APPEND CMAKE_PREFIX_PATH /usr/lib/cmake)
    endif()
    find_package(LEMON REQUIRED)
    #target_link_libraries(HexVolumeRenderer PUBLIC ${LEMON_LIBRARIES})
    include_directories(${LEMON_INCLUDES})
    add_definitions(-DUSE_LEMON)
else()
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Renderers/LOD/SheetComponentMatching.cpp)
endif()

if(USE_STEAMWORKS)
    # TODO: Dirty hack for now for remote testing via Steam. Make this more general.
    include_directories("/home/christoph/build/steamworks-sdk/public/steam/")
    link_directories("/home/christoph/build/steamworks-sdk/redistributable_bin/linux64/")
    add_definitions(-DUSE_STEAMWORKS)
else()
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Utils/Steamworks.cpp)
endif()

if(VCPKG_TOOLCHAIN AND NOT ${VCPKG_EXTERNAL_EMBREE})
    find_package(TBB QUIET)
endif()
find_package(embree)
if(embree_FOUND)
    if (MSYS OR MINGW)
        # Embree version 3.12.1-2 shipped by msys2 seems to be buggy and crashes on rtcCommitScene :(
        if (${embree_VERSION} VERSION_GREATER_EQUAL "4.0.0" AND ${embree_VERSION} VERSION_LESS "5.0.0")
            set(USE_EMBREE ON)
        endif()
    else()
        if (${embree_VERSION} VERSION_LESS "5.0.0")
            set(USE_EMBREE ON)
        endif()
    endif()
endif()
if(USE_EMBREE)
    MESSAGE(STATUS "Found Embree. Using Embree ${embree_VERSION} as the ray-mesh intersection library.")
else()
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Mesh/HexMesh/Renderers/Intersection/RayMeshIntersection_Embree.cpp)
    MESSAGE(STATUS "Embree couldn't be found. Using nanort as the ray-mesh intersection library.")
endif()

if(WIN32)
    add_executable(HexVolumeRenderer WIN32 ${SOURCES})
else()
    add_executable(HexVolumeRenderer ${SOURCES})
endif()

if(${USE_STATIC_STD_LIBRARIES})
    target_link_options(HexVolumeRenderer PRIVATE -static-libgcc -static-libstdc++)
endif()

if (APPLE)
    set(BUNDLE_PATH ${CMAKE_CURRENT_BINARY_DIR}/HexVolumeRenderer.app)
    set_target_properties(
            HexVolumeRenderer PROPERTIES
            OUTPUT_NAME "HexVolumeRenderer"
            MACOSX_BUNDLE_EXECUTABLE_NAME "HexVolumeRenderer"
            MACOSX_BUNDLE_BUNDLE_NAME "HexVolumeRenderer"
            FOLDER "HexVolumeRenderer"
            MACOSX_BUNDLE_SHORT_VERSION_STRING ""
            MACOSX_BUNDLE_LONG_VERSION_STRING ""
            MACOSX_BUNDLE_INFO_PLIST "${CMAKE_CURRENT_SOURCE_DIR}/CMake/MacOSXBundleInfo.plist.in")
endif()

# Hide console window in release build on Windows/MSVC.
# See: https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/recipe/VSConfigSpecificSettings
if(MSVC)
    set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE")
    set_target_properties(HexVolumeRenderer PROPERTIES COMPILE_DEFINITIONS_DEBUG "_CONSOLE")
    set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_RELWITHDEBINFO "/SUBSYSTEM:CONSOLE")
    set_target_properties(HexVolumeRenderer PROPERTIES COMPILE_DEFINITIONS_RELWITHDEBINFO "_CONSOLE")
    set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")
    set_target_properties(HexVolumeRenderer PROPERTIES LINK_FLAGS_MINSIZEREL "/SUBSYSTEM:WINDOWS")
endif()

if(MSVC)
    #target_compile_definitions(HexVolumeRenderer PRIVATE /wd4251)
    set_target_properties(HexVolumeRenderer PROPERTIES COMPILE_FLAGS "/wd4251")
    target_compile_options(HexVolumeRenderer PRIVATE "/MP")
endif()

if (NOT MSVC)
    if (NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_definitions(HexVolumeRenderer PRIVATE NDEBUG)
    endif()
endif()

# Eigen is an optional dependency for eigenvalue solving.
if(VCPKG_TOOLCHAIN)
    find_package(Eigen3 CONFIG QUIET)
else()
    find_package(Eigen3 QUIET)
endif()
if(Eigen3_FOUND)
    if(NOT (EIGEN3_VERSION_STRING LESS 3.3))
        target_link_libraries(HexVolumeRenderer PRIVATE Eigen3::Eigen)
    else()
        include_directories(${EIGEN3_INCLUDE_DIR})
    endif()
    target_compile_definitions(HexVolumeRenderer PRIVATE USE_EIGEN)
endif()

if(USE_CORK)
    find_package(Cork REQUIRED)
    find_package(GMP REQUIRED)
    include_directories(${CORK_INCLUDE_DIR})
    add_definitions(-DUSE_CORK)
    add_definitions(-DUSE_CSG)
    target_link_libraries(HexVolumeRenderer PUBLIC ${CORK_LIBRARIES})
    target_link_libraries(HexVolumeRenderer PUBLIC ${GMP_LIBRARIES})
endif()

if(USE_STEAMWORKS)
    target_link_libraries(HexVolumeRenderer PUBLIC steam_api)
endif()

set(FPHSA_NAME_MISMATCHED TRUE)
if(VCPKG_TOOLCHAIN)
    find_package(SDL2 CONFIG REQUIRED)
else()
    find_package(SDL2 REQUIRED)
endif()
if(MSYS OR MINGW OR (${CMAKE_GENERATOR} STREQUAL "MinGW Makefiles") OR (${CMAKE_GENERATOR} STREQUAL "MSYS Makefiles"))
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mconsole")
    else()
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows")
    endif()
    target_link_libraries(HexVolumeRenderer PUBLIC mingw32)
endif()
if(VCPKG_TOOLCHAIN)
    target_link_libraries(HexVolumeRenderer PUBLIC SDL2::SDL2main)
else()
    target_link_libraries(HexVolumeRenderer PUBLIC SDL2::Main)
endif()

if (UNIX AND NOT APPLE)
    find_package(PkgConfig REQUIRED)
endif()

find_package(sgl QUIET)
if(NOT sgl_FOUND)
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH};third_party/sgl/install/lib/cmake/sgl)
    find_package(sgl REQUIRED)
endif()
find_package(Boost COMPONENTS system filesystem QUIET) # Needed for sgl with vcpkg.
find_package(GLEW REQUIRED)
find_package(OpenGL REQUIRED)
if(VCPKG_TOOLCHAIN)
    find_package(libarchive QUIET)
    find_package(CURL CONFIG REQUIRED)
    find_package(Eigen3 CONFIG REQUIRED)
    find_package(jsoncpp CONFIG REQUIRED)
else()
    find_package(LibArchive QUIET)
    find_package(CURL REQUIRED)
    find_package(Eigen3 REQUIRED)
    find_package(jsoncpp QUIET)
    if (NOT jsoncpp_FOUND)
        pkg_check_modules(JSONCPP jsoncpp)
    endif()
endif()

set(FPHSA_NAME_MISMATCHED TRUE)
if(VCPKG_TOOLCHAIN)
    find_package(tinyxml2 CONFIG REQUIRED)
else()
    find_package(TinyXML2 REQUIRED)
endif()

get_target_property(SGL_INTERFACE_COMPILE_DEFINITIONS sgl INTERFACE_COMPILE_DEFINITIONS)
if (VCPKG_TOOLCHAIN AND UNIX AND NOT APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND ${CMAKE_VERSION} VERSION_GREATER "3.12"
        AND "SGL_STATIC_LIBRARY" IN_LIST SGL_INTERFACE_COMPILE_DEFINITIONS)
    #target_link_options(HexVolumeRenderer PRIVATE "LINKER:--version-script=${CMAKE_CURRENT_SOURCE_DIR}/CMake/symbols_linux_gcc.map")
    target_link_options(HexVolumeRenderer PRIVATE "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/CMake/symbols_linux_gcc.map")
endif()

if(NOT (EIGEN3_VERSION_STRING LESS 3.3))
    target_link_libraries(HexVolumeRenderer PUBLIC Eigen3::Eigen)
else()
    include_directories(${EIGEN3_INCLUDE_DIR})
endif()
target_link_libraries(HexVolumeRenderer PUBLIC sgl ${OPENGL_LIBRARIES} GLEW::GLEW ${NETCDF_LIBRARIES}) # ${LEMON_LIBRARIES}
include_directories(${sgl_INCLUDES} ${OPENGL_INCLUDE_DIRS} ${GLEW_INCLUDES} ${NETCDF_INCLUDES})
if (TARGET CURL::libcurl)
    target_link_libraries(HexVolumeRenderer PUBLIC CURL::libcurl)
else()
    target_link_libraries(HexVolumeRenderer PUBLIC ${CURL_LIBRARIES})
endif()
target_include_directories(HexVolumeRenderer PUBLIC ${CURL_INCLUDES} ${CURL_INCLUDE_DIRS})

if (JSONCPP_LIBRARIES)
    target_link_libraries(HexVolumeRenderer PRIVATE ${JSONCPP_LIBRARIES})
endif()
if (TARGET jsoncpp_lib)
    get_target_property(jsoncpp_INCLUDES jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
    target_link_libraries(HexVolumeRenderer PRIVATE jsoncpp_lib)
elseif(TARGET jsoncpp_static)
    get_target_property(jsoncpp_INCLUDES jsoncpp_static INTERFACE_INCLUDE_DIRECTORIES)
    target_link_libraries(HexVolumeRenderer PRIVATE jsoncpp_static)
endif()
if (TARGET jsoncpp_object)
    target_link_libraries(HexVolumeRenderer PRIVATE jsoncpp_object)
endif()
target_include_directories(HexVolumeRenderer PRIVATE ${jsoncpp_INCLUDES})

if (Python3_FOUND AND USE_PYTHON)
    add_definitions(-DUSE_PYTHON)
    if (${CMAKE_VERSION} VERSION_GREATER "3.11")
        target_link_libraries(HexVolumeRenderer PUBLIC Python3::Python)
    else()
        target_link_libraries(HexVolumeRenderer PUBLIC ${Python3_LIBRARIES})
    endif()
    if(UNIX AND NOT APPLE AND VCPKG_TOOLCHAIN AND ${CMAKE_VERSION} VERSION_GREATER "3.12")
        # Python linked statically in this case. See:
        # https://stackoverflow.com/questions/67891197/ctypes-cpython-39-x86-64-linux-gnu-so-undefined-symbol-pyfloat-type-in-embedd
        if(VCPKG_LIBRARY_LINKAGE STREQUAL "static")
            target_link_options(HexVolumeRenderer PRIVATE "-Xlinker")
            target_link_options(HexVolumeRenderer PRIVATE "-export-dynamic")
        endif()
    endif()
    target_include_directories(HexVolumeRenderer PUBLIC ${Python3_INCLUDE_DIRS})


    # Add default PYTHONHOME path for vcpkg if no environment variable is set.
    if(DEFINED ENV{PYTHONHOME})
        set(PYTHONHOME "$ENV{PYTHONHOME}")
    endif()
    if(VCPKG_TOOLCHAIN)
        if(NOT DEFINED ENV{PYTHONHOME})
            find_path(PYTHONHOME_PATH tools/python3 HINTS ${PYTHONHOME_PATH})
            if (MSVC)
                set(PYTHONHOME "${PYTHONHOME_PATH}/tools/python3")
            else()
                set(PYTHONHOME "${PYTHONHOME_PATH}")
            endif()
        endif()
    endif()
    if (PYTHONHOME)
        if (NOT PYTHONPATH AND (APPLE OR MSYS OR MINGW))
            set(PYTHONPATH "${PYTHONHOME}/lib/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}")
        endif()
        set(PYTHONHOME "${PYTHONHOME}" CACHE STRING "PYTHONHOME path.")
        target_compile_definitions(HexVolumeRenderer PRIVATE PYTHONHOME=L\"${PYTHONHOME}\")
    endif()
    if (PYTHONPATH)
        set(PYTHONPATH "${PYTHONPATH}" CACHE STRING "PYTHONPATH path.")
        target_compile_definitions(HexVolumeRenderer PRIVATE PYTHONPATH=L\"${PYTHONPATH}\")
    endif()
endif()

add_executable(HexaLabDatasetsDownloader ${SOURCES_DOWNLOADER})

# We need to search for the Vulkan package to avoid errors when sgl is built with Vulkan support.
find_package(Vulkan QUIET)
if (${Vulkan_FOUND} AND NOT "USE_SGL_VULKAN_HEADERS" IN_LIST SGL_INTERFACE_COMPILE_DEFINITIONS
        AND "SUPPORT_VULKAN" IN_LIST SGL_INTERFACE_COMPILE_DEFINITIONS
        AND ${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.21.0")
    target_link_libraries(HexVolumeRenderer PUBLIC Vulkan::Headers)
    target_link_libraries(HexaLabDatasetsDownloader PUBLIC Vulkan::Headers)
endif()

if(USE_EMBREE)
    target_compile_definitions(HexVolumeRenderer PRIVATE USE_EMBREE)
    if (${embree_VERSION} VERSION_LESS "4.0.0")
        target_compile_definitions(HexVolumeRenderer PRIVATE USE_EMBREE3)
    elseif (${embree_VERSION} VERSION_LESS "5.0.0")
        target_compile_definitions(HexVolumeRenderer PRIVATE USE_EMBREE4)
    endif()
    if(VCPKG_TOOLCHAIN)
        target_link_libraries(HexVolumeRenderer PRIVATE embree)
    else()
        target_link_libraries(HexVolumeRenderer PRIVATE ${EMBREE_LIBRARIES})
    endif()
    target_include_directories(HexVolumeRenderer PRIVATE ${EMBREE_INCLUDE_DIRS})
endif()

if (${USE_TBB})
    find_package(TBB REQUIRED)
    target_link_libraries(HexVolumeRenderer PRIVATE TBB::tbb)
    target_compile_definitions(HexVolumeRenderer PRIVATE USE_TBB)
else()
    # According to https://devblogs.microsoft.com/cppblog/improved-openmp-support-for-cpp-in-visual-studio/,
    # support for LLVM OpenMP was added with Visual Studio 2019 version 16.9. According to
    # https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170,
    # both Visual Studio 2019 version 16.8 and 16.9 have _MSC_VER / MSVC_VERSION 1928, so we need to check
    # for a minimum version 1929.
    if (APPLE)
        # There are some problems with Homebrew OpenMP as of 2022-10-20.
        find_package(OpenMP QUIET)
        if (OpenMP_FOUND)
            MESSAGE(STATUS "Found OpenMP version ${OpenMP_CXX_VERSION}. Enabling OpenMP threading support.")
        else()
            MESSAGE(STATUS "OpenMP not found. Disabling OpenMP threading support.")
        endif()
    else()
        find_package(OpenMP REQUIRED)
    endif()
    if(OpenMP_FOUND)
        if(MSVC)
            option(USE_MSVC_OPENMP_LLVM "Use LLVM OpenMP with MSVC (available since Visual Studio 2019 version 16.9)." ON)
            option(USE_MSVC_OPENMP_EXPERIMENTAL "Use experimental OpenMP with MSVC (available since Visual Studio 2019 version 16.9)." ON)

            if(${MSVC_VERSION} GREATER_EQUAL 1929 AND (USE_MSVC_OPENMP_LLVM OR USE_MSVC_OPENMP_EXPERIMENTAL))
                define_property(
                        SOURCE
                        PROPERTY COMPILE_FLAGS
                        INHERITED
                        BRIEF_DOCS "brief-doc"
                        FULL_DOCS "full-doc"
                )
                if(USE_MSVC_OPENMP_LLVM)
                    #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp:llvm")
                    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp:llvm")
                    set_directory_properties(PROPERTIES COMPILE_FLAGS "/openmp:llvm")
                endif()
                if(USE_MSVC_OPENMP_EXPERIMENTAL)
                    #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp:experimental")
                    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp:experimental")
                    set_directory_properties(PROPERTIES COMPILE_FLAGS "/openmp:experimental")
                endif()
                if(USE_MSVC_OPENMP_LLVM AND USE_MSVC_OPENMP_EXPERIMENTAL)
                    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /w44005")
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /w44005")
                endif()
                set_source_files_properties("${CMAKE_CURRENT_SOURCE_DIR}/src/LineData/TrianglePayload/NodesBVHTreePayload.cpp" PROPERTIES COMPILE_FLAGS "")
                set_source_files_properties("${CMAKE_CURRENT_SOURCE_DIR}/CMake/winres.rc" PROPERTIES COMPILE_FLAGS "")
            endif()
        elseif(NOT TARGET OpenMP::OpenMP_CXX)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
        else()
            target_link_libraries(HexVolumeRenderer PUBLIC OpenMP::OpenMP_CXX)
        endif()
    endif()
endif()


# Downloading data sets for replicability stamp automatically.
target_link_libraries(HexaLabDatasetsDownloader PUBLIC sgl)
if (TARGET CURL::libcurl)
    target_link_libraries(HexaLabDatasetsDownloader PUBLIC CURL::libcurl)
else()
    target_link_libraries(HexaLabDatasetsDownloader PUBLIC ${CURL_LIBRARIES})
endif()
target_include_directories(HexaLabDatasetsDownloader PUBLIC ${CURL_INCLUDES} ${CURL_INCLUDE_DIRS})

if (JSONCPP_LIBRARIES)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE ${JSONCPP_LIBRARIES})
endif()
if (TARGET jsoncpp_lib)
        get_target_property(jsoncpp_INCLUDES jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE jsoncpp_lib)
elseif(TARGET jsoncpp_static)
        get_target_property(jsoncpp_INCLUDES jsoncpp_static INTERFACE_INCLUDE_DIRECTORIES)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE jsoncpp_static)
endif()
if (TARGET jsoncpp_object)
        target_link_libraries(HexaLabDatasetsDownloader PRIVATE jsoncpp_object)
endif()
target_include_directories(HexaLabDatasetsDownloader PRIVATE ${jsoncpp_INCLUDES})

