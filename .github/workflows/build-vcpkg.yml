name: Build using vcpkg

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, windows-2022 ]
        linking: [ dynamic, static ]
        exclude:
          # dynamic linking fails for SDL2_image and python3 compilation on macOS as of 2022-08-30.
          - os: macos-latest
            linking: dynamic
          # Windows always worked without a problem with both dynamic and static linking, no need to test.
          - os: windows-2022
            linking: static

    runs-on: ${{ matrix.os }}
    name: "${{ github.workflow }}: ${{ matrix.os }} (${{ matrix.linking }})"

    env:
      VCPKG_ROOT: ${{ github.workspace }}/third_party/vcpkg
      VCPKG_CACHE_DIR: ${{ github.workspace }}/third_party/vcpkg/bincache
      VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/third_party/vcpkg/bincache,readwrite
      VCPKG_COMMIT_ID: "a9eee3b18df395dbb8be71a31bd78ea441056e42"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up vcpkg
        shell: bash
        run: |
          mkdir -p "${{env.VCPKG_ROOT}}"
          git clone https://github.com/microsoft/vcpkg.git "${{env.VCPKG_ROOT}}"
          pushd "${{env.VCPKG_ROOT}}"
          if [ -z "${{env.VCPKG_COMMIT_ID}}" ]; then
            export VCPKG_COMMIT_ID="$(git rev-parse HEAD)"
            echo "VCPKG_COMMIT_ID=${VCPKG_COMMIT_ID}" >> $GITHUB_ENV
          else
            export VCPKG_COMMIT_ID="${{env.VCPKG_COMMIT_ID}}"
            git checkout ${{env.VCPKG_COMMIT_ID}}
          fi
          popd
          if [ "$RUNNER_OS" == "Linux" ]; then
            export VCPKG_COPY_TRIPLET="x64-linux"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            export VCPKG_COPY_TRIPLET="x64-windows"
          elif [ "$RUNNER_OS" == "macOS" ] && [ "$(uname -m)" = "x86_64" ]; then
            export VCPKG_COPY_TRIPLET="x64-osx"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            export VCPKG_COPY_TRIPLET="arm64-osx"
          else
            echo "$RUNNER_OS is not supported."
            exit 1
          fi
          echo "VCPKG_COPY_TRIPLET=${VCPKG_COPY_TRIPLET}" >> $GITHUB_ENV
          export VCPKG_DEFAULT_TRIPLET="${VCPKG_COPY_TRIPLET}-${{matrix.linking}}-release-only"
          echo "VCPKG_DEFAULT_TRIPLET=${VCPKG_DEFAULT_TRIPLET}" >> $GITHUB_ENV
          export VCPKG_CACHE_KEY_PART="${{ matrix.os }}-${VCPKG_DEFAULT_TRIPLET}-${VCPKG_COMMIT_ID}-${{ github.event.repository.name }}"
          echo "VCPKG_CACHE_KEY=vcpkg-${VCPKG_CACHE_KEY_PART}-" >> $GITHUB_ENV
          echo "VCPKG_CACHE_KEY_FULL=vcpkg-${VCPKG_CACHE_KEY_PART}-${{ hashFiles('vcpkg.json') }}" >> $GITHUB_ENV

      - name: Restore vcpkg cache
        uses: actions/cache/restore@v4
        with:
          path: ${{env.VCPKG_CACHE_DIR}}
          key: ${{env.VCPKG_CACHE_KEY_FULL}}
          restore-keys: ${{env.VCPKG_CACHE_KEY}}

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 4.0.0

      - name: Create custom vcpkg triplet
        shell: bash
        run: |
          cp "${{env.VCPKG_ROOT}}/triplets/${{env.VCPKG_COPY_TRIPLET}}.cmake" "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
          echo "set(VCPKG_BUILD_TYPE release)" >> "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
          sed -i -e 's/.*VCPKG_LIBRARY_LINKAGE.*/set(VCPKG_LIBRARY_LINKAGE ${{matrix.linking}})/g' "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
          if [ "$RUNNER_OS" == "Linux" ] && [ "${{matrix.linking}}" == "dynamic" ]; then
           echo "set(VCPKG_FIXUP_ELF_RPATH ON)" >> "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
          fi

      - name: Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            ./build.sh --vcpkg --do-not-run --vcpkg-triplet ${{env.VCPKG_DEFAULT_TRIPLET}}
          #elif [ "$RUNNER_OS" == "Windows" ]; then
          #  ./build-msvc.bat --do-not-run --vcpkg-triplet ${{env.VCPKG_DEFAULT_TRIPLET}}
          fi

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call build-msvc.bat --do-not-run --vcpkg-triplet ${{env.VCPKG_DEFAULT_TRIPLET}}

      - name: Save vcpkg cache
        uses: actions/cache/save@v4
        with:
          path: ${{env.VCPKG_CACHE_DIR}}
          key: ${{env.VCPKG_CACHE_KEY_FULL}}
